{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAiBA,OACI,sBAAMC,SAbW,SAAEC,GAEnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,SAEI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAtBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCLnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEqCC,UAAWH,GAFhD,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAY,yCAAjB,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAEHxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDhB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCAEI,qBAAIJ,UAAY,oCAAhB,cAAsDhB,EAAtD,OAEEoB,GAAW,mBAAGJ,UAAY,mCAAf,wBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBxBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MChBpC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0f9ee0b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [ inputValue, setInputValue ] = useState('');\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSummit = ( e ) => {\n\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] );\n            setInputValue('');\n        }\n\n        // console.log('Submit hecho'); \n    }\n\n    return (\n        <form onSubmit = { handleSummit }>\n            {/* <h2>Add Category</h2> */}\n            <input \n                type = \"text\"\n                value = { inputValue }\n                onChange = { handleInputChange  }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${  encodeURI( category ) }&limit=10&api_key=gBYCAd9b1qBPTOV8pQO2mgVW7kcsIdDA`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n}","import React from 'react';\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className = \"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p> { title } </p>\n        </div>\n    )\n\n}","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GitGrid = ( { category } ) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n\n            <h3 className = 'animate__animated animate__fadeIn'> {category} </h3>\n\n            { loading && <p className = 'animate__animated animate__flash'>Loading...</p> }\n\n            <div className=\"card-grid\">\n\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n            </div>\n\n        </>\n    )\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n            \n            getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            } )\n\n    }, [category])\n\n    return state;\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GitGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch Man']);\n    \n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'SNK']);\n    //     setCategories( cats => [...cats, 'SNK'] );\n    // }\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories = { setCategories } />\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GitGrid \n                            key = { category }\n                            category = { category } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}